---
import type { GetStaticPaths } from "astro";
import { render } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import contests from "../../content/pages/contests.json";
import AuthorDisplay from "../../components/AuthorDisplay.astro";
import "katex/dist/katex.min.css";

export const getStaticPaths = (async () => {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { post: post.id },
    props: { post },
  }));
}) satisfies GetStaticPaths;

const { post } = Astro.props;
const { Content } = await render(post);
const contestMap = new Map(contests.events.map((event) => [event.id, event]));
const tags = post.data.tags ?? [];
---

<Layout>
  <h1>
    {post.data.draft && <span class="draft">[draft]</span>}
    {post.data.title}
  </h1>

  <div class="metadata">
    <div title={post.data.date.toISOString()}>
      {
        post.data.date.toLocaleDateString([], {
          dateStyle: "full",
        })
      }
    </div>
    <div>
      Authored by {
        typeof post.data.author === "string" ? (
          <AuthorDisplay name={post.data.author} />
        ) : (
          post.data.author.map((name) => <AuthorDisplay name={name} />)
        )
      }
    </div>
    {
      post.data.ctf_id && (
        <div>
          CTF:{" "}
          <a
            href={`${import.meta.env.BASE_URL}pages/contests#${post.data.ctf_id}`}
          >
            {contestMap.get(post.data.ctf_id)?.name}
          </a>
        </div>
      )
    }
    {tags.length > 0 && <div>Tags: {tags.join(", ")}</div>}
  </div>

  <div class="postContent">
    <Content />
  </div>
</Layout>

<style>
  .draft {
    color: yellow;
  }

  .metadata {
    font-size: 90%;
    color: rgba(255, 255, 255, 0.5);
  }

  .postContent {
    pre {
      padding: 1rem;
    }
  }
</style>
